// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)

    favouriteClubId String?
    favouriteClub   Club?   @relation("favouriteClub", fields: [favouriteClubId], references: [id])

    accounts     Account[]
    sessions     Session[]
    clubsCreated Club[]
    playersAdded Player[]
    fplTeams     FplTeam[]
    fplPlayers   FplPlayer[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UserRole {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Club {
    id String @id @default(cuid())

    name      String
    shortName String?

    logoUrl             String
    jerseyUrl           String
    goalkeeperJerseyUrl String?

    user   User   @relation(fields: [userId], references: [id])
    userId String

    players    Player[]
    favourites User[]   @relation("favouriteClub")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Player {
    id String @id @default(cuid())

    name        String
    displayName String?

    position Position
    price    Float

    user   User   @relation(fields: [userId], references: [id])
    userId String

    clubId String
    club   Club   @relation(fields: [clubId], references: [id])

    FplPlayer FplPlayer[]
}

enum Position {
    GOALKEEPER
    DEFENDER
    MIDFIELDER
    FORWARD
}

model FplPlayer {
    id String @id @default(cuid())

    status PlayerStatus

    playerId String
    player   Player @relation(fields: [playerId], references: [id])

    fplTeamId String
    fplTeam   FplTeam @relation(fields: [fplTeamId], references: [id])

    userId String
    user   User   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PlayerStatus {
    STARTER
    BENCH
}

model FplTeam {
    id String @id @default(cuid())

    name   String
    status Status

    userId String
    user   User   @relation(fields: [userId], references: [id])

    fplPlayers FplPlayer[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Status {
    DRAFT
    ACTIVE
}
